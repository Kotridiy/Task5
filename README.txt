Задача №5. Написать веб-приложение, основанное на Asp.Net MVC, являющеяся продолжением 4-ой задачи.

Приложение имеет n-layer архитектуру со следующими проектами-компонентами: DAL (Data Access Layer) 
в качестве уровня доступа к данным, BLL (Business Logic Layer) в качестве уровня бизнес логики, 
WebApplication в качестве уровня представления и Core как связуещее звено между всеми уровнями.

DAL. Уровень доступа данных представлен через паттерны Repository и UoW (Unit of Work). В DataModels 
находяться модели для работы непосредственно с БД, папка EntityFramework содержит компоненты EF, 
Interfaces хранит все интерфейсы этого уровня, Repositories содержит реализацию репозиториев, Implements 
содержит реализацию UoW. Стоит отметить, что в этом уровене релизовано две версии репозиториев и UoW: 
работающая с БД через EF и MOCK, имитируящая работу с БД. Из-за ошибок в сборке, которые я не смог 
решить, мне пришлось использовать для тестирования именно вторую версию. Спасибо за понимание.

BLL. Уровень бизнес логики является транспортной системой между двумя другими уровнями, где выполняется 
необходимое чтение-запись в БД (через UoW), дополнительная валидация данных, отлов и генерация 
специализированых исключений. Папка DTO (Data Transfer Object) содержит модели, для передачи из DAL 
в Web и наоборот. Infrastructure по идее содержит дополнительные классы, необходимые для этого уровня. 
Сейчас тан находяться специальные 2 класса исключений, для того чтобы точно указать какое исключение 
возникло. Interfaces хранит интерфейс простого сервиса. Соответсвенно Services содержит сервисы, для 
каждого объекта отдельно. Следует отметить что SoldProductService НЕ РЕАЛИЗУЕТ интерфейс простого 
сервиса, так как у него своя логика работы. К сожалению я не придумал как объеденить остальные 
сервисы в отдельный обобщённый класс, поэтому там копипаст.

Web. Уровень представление реализуется классическим Asp.net MVC приложением, его структура не менялась. 
Какие детали стоит учесть. В папке контроллеров GeneralDataController явялется обобщением 
для трёх других контроллеров. Каждый из его методов виртуальный, чтобы можно было переопределить права 
доступа. В папке моделей, в файле SoldProductViewModels 2 модели представления: для создания и вывода. 
Остальные файлы содержат по одной модели.

Теперь по порядку касательно требований. ПЕРВОЕ. Приложение читает данные из БД (по крайней мере должно) 
и отображает в виде, удобном для анализа. У каждой сущности есть свой контроллер, своя модель 
представления и свои представления на каждое из действий. Для модели SoldProduct есть примитивный фильтр, 
делающий выборку по цене. ВТОРОЕ. В системе есть стандартная аутентификация пользователей. Две роли: 
Admin и User (по умолчанию). Просматривать данные из БД могут только зарегестрированные пользователи, 
а удалять и изменять только администратор. ТРЕТЬЕ. Представления преимущесвенно работают на Razor. 
Удаление моделей, фильтрация и получение данных для диаграммы выполняется с помощью ajax-запросов. 
ЧЕТВЁРТОЕ. Атрибуты валидации и механизм Razor обеспечивают генерацию скриптов для клиентской валидации. 
Также по этим же атрибутам идёт валидация в контроллерах. И дополнительная валидация данных в БД 
происходит в сервисах на уровне BL. ПЯТОЕ. На главной странице отображеться диаграмма по оставшимся 
товарам на прилавке. Код диаграммы взят у Ивана (наш преподаватель) и отредактированный под себя.

Спасибо за внимание :)